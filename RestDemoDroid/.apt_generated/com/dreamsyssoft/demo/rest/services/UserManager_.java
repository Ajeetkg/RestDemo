//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package com.dreamsyssoft.demo.rest.services;

import java.util.HashMap;
import com.dreamsyssoft.demo.rest.model.UserRequest;
import com.dreamsyssoft.demo.rest.model.UserResponse;
import org.androidannotations.api.rest.RestErrorHandler;
import org.springframework.http.HttpAuthentication;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

public class UserManager_
    implements UserManager
{

    private RestTemplate restTemplate;
    private String rootUrl;
    private RestErrorHandler restErrorHandler;
    private HashMap<String, String> availableHeaders;
    private HashMap<String, String> availableCookies;
    private HttpAuthentication authentication;

    public UserManager_() {
        restTemplate = new RestTemplate();
        restTemplate.getMessageConverters().add(new MappingJacksonHttpMessageConverter());
        rootUrl = "http://10.0.0.5:8080/RestDemo/services/rest/UserManager";
        availableHeaders = new HashMap<String, String>();
        availableCookies = new HashMap<String, String>();
    }

    @Override
    public UserResponse deleteUser(UserRequest request) {
        HttpEntity<UserRequest> requestEntity = new HttpEntity<UserRequest>(request);
        try {
            return restTemplate.exchange(rootUrl.concat("/deleteUser"), HttpMethod.POST, requestEntity, UserResponse.class).getBody();
        } catch (RestClientException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public UserResponse updateUser(UserRequest request) {
        HttpEntity<UserRequest> requestEntity = new HttpEntity<UserRequest>(request);
        try {
            return restTemplate.exchange(rootUrl.concat("/updateUser"), HttpMethod.POST, requestEntity, UserResponse.class).getBody();
        } catch (RestClientException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public UserResponse fetchUserById(UserRequest request) {
        HttpEntity<UserRequest> requestEntity = new HttpEntity<UserRequest>(request);
        try {
            return restTemplate.exchange(rootUrl.concat("/fetchUserById"), HttpMethod.POST, requestEntity, UserResponse.class).getBody();
        } catch (RestClientException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public UserResponse insertUser(UserRequest request) {
        HttpEntity<UserRequest> requestEntity = new HttpEntity<UserRequest>(request);
        try {
            return restTemplate.exchange(rootUrl.concat("/insertUser"), HttpMethod.POST, requestEntity, UserResponse.class).getBody();
        } catch (RestClientException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public UserResponse fetchAllUsers(UserRequest request) {
        HttpEntity<UserRequest> requestEntity = new HttpEntity<UserRequest>(request);
        try {
            return restTemplate.exchange(rootUrl.concat("/fetchAllUsers"), HttpMethod.POST, requestEntity, UserResponse.class).getBody();
        } catch (RestClientException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

}
